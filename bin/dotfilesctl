#! /bin/env bash

# dotfiles management script

# Options
OPTION_SETUP=
OPTION_PACKAGES=()
OPTION_FORCE=0
OPTION_DRYRUN=0
REST_ARGS=

SETUPS=()
SETUP=
PACKAGES=()
PACKAGE=
FILES_IN_REPO_PATH=()
FILES_IN_REPO_PACKAGE=()

declare -A CONFIG
CONFIG[REPO_PATH]=

## HELPER FUNCTIONS ##

# Error display
err() {
  echo "ERROR: $@" >&2
}

# Get list of setups
get_setups() {
  for entry in $(command ls ${CONFIG[REPO_PATH]}); do
    [[ -d "${CONFIG[REPO_PATH]}"/$entry ]] && SETUPS[${#SETUPS[*]}]=$entry
  done
}

# Get list of packages for given setup
get_packages() {
  local repo_path=${CONFIG[REPO_PATH]}
  local setup=$1
  local pkg_dir=
  for entry in $(command ls "$repo_path/$setup"); do
    pkg_dir="$repo_path/$setup/$entry"
    [[ -d $pkg_dir ]] && PACKAGES[${#PACKAGES[*]}]=$entry
  done
}

array_contains() {
  local item=$1
  shift
  local arr=$@
  for i in ${arr[*]}; do
    [[ $item == $i ]] && return 0
  done
  return 1
}

assoc_array_has_key() {
  local assoc_arr_def=$(declare -p "$1")
  eval "declare -A local assoc_arr="${assoc_arr_def#*=} > /dev/null
  local key=$2
  [ -z ${assoc_arr[key]+"check"} ]
}

check_extra_args() {
  if [[ $# > 0 ]]; then
    err "Unrecognized extra arguments $@"
    return 1
  fi
}

read_config() {
  local CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}"/dotfilesctl/config
  if [ -f $CONFIG_FILE ]; then
    IFS_BACKUP=$IFS
    while IFS='=' read key value; do
      IFS=$IFS_BACKUP
      assoc_array_has_key CONFIG REPO_PATH && CONFIG[$key]="$value"
    done < $CONFIG_FILE
  fi
}

check_repo_path() {
  [[ -n ${CONFIG[REPO_PATH]} ]] ||
  (
    err "Please configure REPO_PATH via dotfilesctl config REPO_PATH=/path/to/repo"
    return 99
  )
}

hostname() {
  [[ -f /etc/hostname ]] && cat /etc/hostname
}

path_relative_to_dir() {
  local dir=$(realpath $1)
  local path=$(realpath -s $2)
  if ! [[ ${path:0:${#dir}} == ${dir} ]]; then
    err "$2 is not (a file in) a subfolder of $1"
    return 1
  fi
  local substr=${path:${#dir}+1}
  if [[ -z $substr ]]; then
    err "You cannot track the entire HOME dir"
    return 1
  fi
  echo ${substr}
}

check_setup() {
  SETUP=${OPTION_SETUP:-$(hostname)}
  array_contains $SETUP ${SETUPS[*]}
  if [[ $? == 1 ]]; then
    err "$SETUP is not a valid setup"
    return 1
  fi
}

print_help_and_exit() {
  help
  exit ${1:-99}
}

arrayify() {
  tr ',' ' ' <<< $1
}

read_options() {
  local optstring=${1}
  shift
  while getopts ${optstring} optname; do
    case ${optname} in
      s)  OPTION_SETUP="$OPTARG";;
      p)  OPTION_PACKAGES=($(arrayify "$OPTARG"));;
      f)  OPTION_FORCE=1;;
      d)  OPTION_DRYRUN=1;;
      ?)  echo "Unknown option : $optname"
    esac
  done
  shift $(($OPTIND - 1))
  REST_ARGS=${*}
}

check_packages_validity() {
  local pos_params=(${*})
  for ((p_idx=0; p_idx<$#; p_idx++)); do
    local pkg=${pos_params[$p_idx]}
    array_contains $pkg ${PACKAGES[*]}
    if [[ $? == 1 ]]; then
      err "$pkg is not a valid package"
      return 1
    fi
  done
}  

check_package() {
  if [[ -z $PACKAGE ]]; then
    err "Missing required package param"
    return 1
  fi
}

get_files_in_repo() {
  local current_dir=
  local pkg_dir=
  local ls_rec_output=()
  local tmp=
  for package in $*; do
    pkg_dir="${CONFIG[REPO_PATH]}/${SETUP}/$package"
    ls_rec_output=($(command ls -RAB $pkg_dir))
    for ls_rec_item in ${ls_rec_output[*]}; do
      ((tmp=${#ls_rec_item}-1))
      if [[ ${ls_rec_item:$tmp} == ':' ]]; then
        current_dir=${ls_rec_item:0:$tmp}
      else
        tmp="${current_dir}/${ls_rec_item}"
        if [[ ! -d $tmp ]]; then
          FILES_IN_REPO_PATH[${#FILES_IN_REPO_PATH[*]}]=${tmp:${#pkg_dir}+1}
          FILES_IN_REPO_PACKAGE[${#FILES_IN_REPO_PACKAGE[*]}]=${package}
        fi
      fi
    done
  done  
}

check_files() {
  local files=$@
  if [[ ${#files} == 0 ]]; then
    err "No files were provided"
    return 1
  fi
  for file in $files; do
    if ! ([[ -f $file ]] || [[ -d $file ]]); then
      err "$file is neither a file nor a directory"
      return 1
    fi &&
    path_relative_to_dir $HOME $file > /dev/null
  done
}

check_files_in_repo() {
  local files=$@
  if [[ ${#files} == 0 ]]; then
    err "No files were provided"
    return 1
  fi
  for rel_file in $files; do
    for ((p=0; p<${#FILES_IN_REPO_PATH[*]};p++)); do
      if [[ ${FILES_IN_REPO_PATH[$p]} == $rel_file ]]; then
        return 0
      fi
    done
    err "$rel_file isn't tracked yet"
    return 1
  done
}

check_files_local() {
  local files=$@
  if [[ ${#files} == 0 ]]; then
    err "No files were provided"
    return 1
  fi
  for rel_file in $files; do
    local file=$HOME/$rel_file
    if ! ([[ -f $file ]] || [[ -d $file ]]); then
      err "$file is neither a file nor a directory"
      return 1
    fi
  done
}

# Print given filepaths, one on each line
list_files() {
  echo ${*} | tr ' ' \\n | sort -u
}  

# Checks whether two files have identical content
compare_files() {
  if [[ -f $1 ]] && [[ -f $2 ]]; then
    local lhs_hash=$(sha1sum $1 | cut -d' ' -f1) &&
    local rhs_hash=$(sha1sum $2 | cut -d' ' -f1) &&
    [[ $lhs_hash == $rhs_hash ]]
  elif [[ -h $1 ]] && [[ -h $2 ]]; then
    local lhs_link=$(readlink $1)
    local rhs_link=$(readlink $2)
    [[ $lhs_link == $rhs_link ]]
  else
    return 1
  fi
}

# Print file status
get_file_status() {
  local local_file="$HOME/$1" &&
  local repo_file="${CONFIG[REPO_PATH]}/$SETUP/$2/$1" &&
  if [[ ! -e $local_file ]]; then
    echo "  not deployed: $1"
  elif [[ -f $local_file ]] && [[ -d $repo_file ]]; then
    echo "  diff (not a dir): $1"
  elif [[ -d $local_file ]] && [[ -f $repo_file ]]; then
    echo "  diff (not a file): $1"
  elif [[ -f $local_file ]]; then
    if [[ ! -h $local_file ]] && [[ -h $repo_file ]]; then
      echo "  diff (not a symbolik link): $1"
    elif [[ -h $local_file ]] && [[ ! -h $repo_file ]]; then
      echo "  diff (not a regular file): $1"
    elif [[ ! -h $local_file ]]; then
      if ! compare_files $local_file $repo_file; then
        echo "  diff: $1"
      fi
    else #symbolik links
      if ! compare_files $local_file $repo_file; then
        echo "  diff (link diff): $1"
      fi
    fi
  fi
}

# Print files status
get_files_status() {
  echo "Local/repo files changes:" &&
  for file in ${*}; do
    get_file_status "$file" $(get_file_package "$file")
  done
}

get_file_package() {
  local target_package
  for ((p=0; p<${#FILES_IN_REPO_PATH[*]};p++)); do
    if [[ ${FILES_IN_REPO_PATH[$p]} == $1 ]]; then
      target_package=${FILES_IN_REPO_PACKAGE[$p]}
    fi
  done
  if [[ -z $target_package ]]; then
    err "File $1 is not in a package"
    return 1
  fi
  echo "$target_package"
}  

track_file() {
  local pkg="${1}" &&
  local dest_dir="${CONFIG[REPO_PATH]}/$SETUP/$pkg" &&
  local check_if_in_other_pkg=${2:-0} &&
  local file="${3}" &&
  local rel_file="$(path_relative_to_dir $HOME $file)" &&
  local track_source=$(realpath -s "$file") &&
  local track_target=$(dirname "${dest_dir}/${rel_file}") &&
  local other_package
  if [[ $check_if_in_other_pkg == 1 ]]; then
    get_packages ${SETUP} &&
    get_files_in_repo ${PACKAGES[*]} &&
    other_package=$(get_file_package $rel_file 2> /dev/null)
    if [[ $? == 0 ]] && [[ ! $other_package == $pkg ]]; then
      err "File is already tracked in other package ($other_package)"
      return 4
    fi
  fi &&
  mkdir -p "${track_target}" &&
  cp -rdP "$track_source" "$track_target" &&
  echo "Copied ${track_source} to ${track_target} ..."
}

diff_file() {
  local local_file="$HOME/$1" &&
  local repo_file="${CONFIG[REPO_PATH]}/$SETUP/$2/$1" &&
  if [[ ! -e $local_file ]]; then
    echo "Local file is absent"
  elif [[ -f $local_file ]] && [[ -d $repo_file ]]; then
    echo "Local file is a file"
    echo "Repo file is a directory"
  elif [[ -d $local_file ]] && [[ -f $repo_file ]]; then
    echo "Local file is a directory"
    echo "Repo file is a file"
  elif [[ -f $local_file ]]; then
    if [[ ! -h $local_file ]] && [[ -h $repo_file ]]; then
      echo "Local file is a regular file"
      echo "Repo file is a symbolic link"
    elif [[ -h $local_file ]] && [[ ! -h $repo_file ]]; then
      echo "Local file is a symbolic link"
      echo "Repo file is a regular file"
    elif [[ ! -h $local_file ]]; then
      if ! compare_files $local_file $repo_file; then
        command diff $repo_file $local_file --color=auto || return 0
      else
        echo "Local and repo files are identical"
      fi
    else #symbolik links
      if ! compare_files $local_file $repo_file; then
        local local_file_link=$(readlink $local_file)
        local repo_file_link=$(readlink $repo_file)
        echo "Local symbolic link: $local_file_link"
        echo "Repo symbolic link: $repo_file_link"
      else
        echo "Local and repo symbolic links are identical"
      fi
    fi
  fi
}

generate_deployment_id() {
  date +%Y%m%d%H%M%S
}

deploy_file() {
  local deployment_dir="$1"
  local force=${4:-0}
  local dry_run=${5:-0}
  local source_file=${CONFIG[REPO_PATH]}/$SETUP/$2/$3
  local target_file=$HOME/$3
  local backup_archive=$deployment_dir/backup.tar
  echo -n "  $3... " &&
  if ! compare_files $target_file $source_file; then
    if [[ $dry_run == 0 ]]; then
        mkdir -p $deployment_dir
    fi &&
    if [[ -e $target_file ]]; then
      if [[ $dry_run != 0 ]]; then
        echo -n "[DRYRUN]"
      elif [[ -e $backup_archive ]]; then
        tar -rf  $backup_archive -C $HOME $3
      else
        tar -cf $backup_archive -C $HOME $3
      fi &&
      echo -n "BACKUP ✓ "
    fi &&
    if [[ $dry_run != 0 ]]; then
      echo -n "[DRYRUN]"
    else
      cp -P $source_file $target_file
    fi &&
    echo "DEPLOYED ✓"
  else
    echo "NOCHANGE ✓"
  fi
}

deploy_files() {
  local package=
  local deployment_id=
  local force=${1:-0}
  local dry_run=${2:-0}
  local deployment_dir=
  local backup_archive=
  shift 2 &&
  deployment_id=$(generate_deployment_id) &&
  deployment_dir="${XDG_DATA_HOME:-$HOME/.local/share}"/dotfilesctl/deployments/$deployment_id &&
  backup_archive=$deployment_dir/backup.tar &&
  for file in $*; do
    package=$(get_file_package $file 2> /dev/null) &&
    deploy_file $deployment_dir $package $file $force $dry_run
  done &&
  if [[ $dry_run == 0 ]] && [[ -e $backup_archive ]]; then
    gzip $backup_archive &&
    echo "Backup archive: $backup_archive.gz"
  fi
}


## ACTIONS ##

# Action: help
# Displays usage
help() {
  cat << EOF
dotfiles management utility

Usage
  dotfilesctl status [-s <setup>]
  dotfilesctl setups
  dotfilesctl packages [-s <setup>]
  dotfilesctl ls [-s <setup>] [-p <package>...]
  dotfilesctl track [-s <setup>] <package> <file>...
  dotfilesctl add [-s <setup>] <file>...
  dotfilesctl deploy [-s <setup>] [-p <package1>,<package2>...] [-d]
  dotfilesctl checkout [-s <setup>] [-d] <file>...
  dotfilesctl diff [-s <setup>] <file>
  dotfilesctl backups
  dotfilesctl [help [action]]

When <setup> is not provided, hostname is read instead, from /etc/hostname.
EOF
}

# Action: status
# Give basic info about configuration and lists diffs between repo and local files
status() {
  echo "Configured target repository: ${CONFIG[REPO_PATH]:-None}" &&
  local ls_packages=() &&
  read_options "s:" $* &&
  echo "Configured setup: ${CONFIG[SETUP]:-None}" &&
  set -- ${REST_ARGS} &&
  check_extra_args $* &&
  if [[ ! -z ${CONFIG[REPO_PATH]} ]]; then
    check_repo_path &&
    get_setups &&
    check_setup &&
    get_packages $SETUP &&
    ls_packages=${PACKAGES[*]} &&
    get_files_in_repo ${ls_packages[*]} &&
    get_files_status ${FILES_IN_REPO_PATH[*]}
  fi
} 

# Action: list-setups
# List available setups
setups() {
  check_extra_args $* &&
  get_setups &&
  echo $SETUPS
}

# Action: list-packages
# List available packages in given setup
packages() {
  read_options "s:" $* &&
  set -- ${REST_ARGS} &&
  check_extra_args $* &&
  get_setups &&
  check_setup &&
  get_packages $SETUP &&
  echo ${PACKAGES[*]}
}

# Action: ls
# List dotfiles paths
ls() {
  local ls_packages=()
  read_options "s:p:" $* &&
  set -- ${REST_ARGS} &&
  check_extra_args $* &&
  get_setups &&
  check_setup &&
  if [[ ${#OPTION_PACKAGES[*]} > 0 ]]; then
    get_packages $SETUP
    check_packages_validity ${OPTION_PACKAGES[*]} &&
    ls_packages=${OPTION_PACKAGES[*]}
  else
    get_packages $SETUP &&
    ls_packages=${PACKAGES[*]}
  fi &&
  get_files_in_repo ${ls_packages[*]} &&
  list_files ${FILES_IN_REPO_PATH[*]}
}

# Action: track
# Copies one or many files from the HOME dir to a specific package and setup in the repo.
track() {
  read_options "s:d" $* &&
  set -- ${REST_ARGS} &&
  get_setups &&
  check_setup &&
  PACKAGE=$1 &&
  shift &&
  get_packages $SETUP &&
  check_package &&
  check_files $@ &&
  for file in $@; do
    track_file "${PACKAGE}" 1 "$file"
  done
}

# Action: add
# Does the same as track on files that are already tracked
# thus it's not necessary to provide the package.
add() {
  read_options "s:" $* &&
  set -- ${REST_ARGS} &&
  get_setups &&
  check_setup &&
  get_packages ${SETUP} &&
  get_files_in_repo ${PACKAGES[*]} &&
  check_files_in_repo $@ &&
  check_files_local $@ &&
  local pkg= &&
  for rel_file in $@; do
    pkg=$(get_file_package ${rel_file}) &&
    track_file "${pkg}" 0 "$HOME/${rel_file}" 
  done
}

# Action: diff
# Display diff between local and repo file for given file
diff() {
  local package=
  local rel_file=
  read_options "s:" $* &&
  set -- ${REST_ARGS} &&
  rel_file=$1 &&
  get_setups &&
  check_setup &&
  get_packages $SETUP &&
  get_files_in_repo ${PACKAGES[*]} &&
  check_files_in_repo $rel_file &&
  package=$(get_file_package $rel_file) &&
  shift &&
  check_extra_args $* &&
  diff_file $rel_file $package
}

# Action: deploy
# Copies files from repo to the $HOME dir, where they belong
deploy() {
  local ls_packages=()
  read_options "s:p:fd" $* &&
  set -- ${REST_ARGS} &&
  check_extra_args $* &&
  get_setups &&
  check_setup &&
  get_packages $SETUP &&
  if [[ ${#OPTION_PACKAGES[*]} > 0 ]]; then
    check_packages_validity ${OPTION_PACKAGES[*]} &&
    ls_packages=${OPTION_PACKAGES[*]}
  else
    ls_packages=${PACKAGES[*]}
  fi &&
  get_files_in_repo ${ls_packages[*]} &&
  deploy_files ${OPTION_FORCE} ${OPTION_DRYRUN} ${FILES_IN_REPO_PATH[*]}
}

# Action: checkout
checkout() {
  read_options "s:fd" $* &&
  set -- ${REST_ARGS} &&
  get_setups &&
  check_setup &&
  get_packages ${SETUP} &&
  get_files_in_repo ${PACKAGES[*]} &&
  check_files_in_repo $@ &&
  deploy_files ${OPTION_FORCE} ${OPTION_DRYRUN} $*
}

# Action: backups
# List backups IDs
backups() {
  command ls "${XDG_DATA_HOME:-$HOME/.local/share}/dotfilesctl/deployments/"
}

# Entry point
main() {
  # Read config file
  read_config
  # Retrieve action from params and launch function
  local ACTION=${1:-help}
  shift
  case $ACTION in
    status | config | help)
      $ACTION $@ || print_help_and_exit $?
      ;;
    setups | packages | ls | track | add | checkout | deploy | backups | config | diff)
      check_repo_path &&
      $ACTION $@ || print_help_and_exit $?
      ;;
    *)
      err "$ACTION is not a valid action."
      print_help_and_exit 2
      ;;
  esac
}

main $@
